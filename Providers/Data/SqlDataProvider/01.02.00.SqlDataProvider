IF  EXISTS (SELECT * FROM {databaseOwner}{objectQualifier}sysobjects WHERE id = OBJECT_ID(N'{objectQualifier}DF_DNNQA_GroupQuestions_IsDefault') AND type = 'D')
	BEGIN
		ALTER TABLE {databaseOwner}{objectQualifier}DNNQA_GroupQuestions DROP CONSTRAINT {objectQualifier}DF_DNNQA_GroupQuestions_IsDefault
	END
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}DNNQA_GroupQuestions') AND type in (N'U'))
	DROP TABLE {databaseOwner}{objectQualifier}DNNQA_GroupQuestions
GO


CREATE TABLE {databaseOwner}{objectQualifier}DNNQA_GroupQuestions(
	[GroupID] [int] NOT NULL,
	[QuestionID] [int] NOT NULL,
	[IsDefault] [bit] NOT NULL
) ON [PRIMARY]
GO

ALTER TABLE {databaseOwner}{objectQualifier}DNNQA_GroupQuestions ADD  CONSTRAINT {objectQualifier}DF_DNNQA_GroupQuestions_IsDefault  DEFAULT ((0)) FOR [IsDefault]
GO

/****** Object:  StoredProcedure {databaseOwner}{objectQualifier}DNNQA_Question_GetHomeGroup    Script Date: 6/23/2013 4:47:53 PM ******/

if exists (select * from {databaseOwner}{objectQualifier}sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}DNNQA_Question_GetHomeGroup') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE  {databaseOwner}{objectQualifier}DNNQA_Question_GetHomeGroup
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}DNNQA_Question_GetHomeGroup]
	@ModuleID INT, 
	@ExcludeCount INT, 
	@Score INT,
	@GroupId INT
AS 
	SELECT TOP ( 200 ) PostID, (SELECT Title FROM {databaseOwner}{objectQualifier}DNNQA_Post WHERE  PostID = vp.PostID) AS Title, 
			Body, Bounty, ParentID, PortalID, ViewCount, Score, Approved, ApprovedDate, Deleted, AnswerID, AnswerDate, Closed, 
			ClosedDate, Protected, ProtectedDate, CreatedUserID, CreatedDate, LastModifiedUserID, LastModifiedDate, ContentItemID, 
			Content, ContentTypeID, TabID, ModuleID, ContentKey, Indexed, CreatedByUserID, CreatedOnDate, LastModifiedByUserID, 
			LastModifiedOnDate, 
			(SELECT TOP (1) CreatedUserID FROM {databaseOwner}{objectQualifier}vw_DNNQA_Posts
			  WHERE  (PostID = vp.PostID OR ParentID = vp.PostID) AND Deleted = 0 AND Approved = 1 ORDER BY  CreatedDate DESC
			) AS LastApprovedUserID, 
			(SELECT TOP (1) CreatedDate FROM {databaseOwner}{objectQualifier}vw_DNNQA_Posts
			  WHERE (PostID = vp.PostID OR ParentID = vp.PostID) AND Deleted = 0 AND Approved = 1 ORDER BY  CreatedDate DESC
			) AS LastApprovedDate, 
			(SELECT COUNT(PostID) FROM {databaseOwner}{objectQualifier}DNNQA_Post 
			  WHERE (ParentID = vp.PostID) AND ( ParentID <> 0) AND (Approved = 1) AND (Deleted = 0)) AS TotalAnswers, 
			(SELECT COUNT(PostId) FROM {databaseOwner}{objectQualifier}DNNQA_Vote WHERE PostID = vp.PostID AND VoteTypeID = 1) AS UpVotes, 
			(SELECT COUNT(PostId) FROM {databaseOwner}{objectQualifier}DNNQA_Vote WHERE PostID = vp.PostID AND VoteTypeID = -1) AS DownVotes, 
			(SELECT COUNT(PostID) FROM {databaseOwner}{objectQualifier}vw_DNNQA_Posts WHERE ModuleID = @ModuleID
						AND ParentID = 0 AND Deleted = 0) AS TotalRecords
	FROM {databaseOwner}{objectQualifier}vw_DNNQA_Posts vp
	WHERE   ModuleID = @ModuleID AND ParentID = 0 AND Deleted = 0 AND Approved = 1 AND Score >= @Score
		AND vp.PostID IN (SELECT QuestionID FROM {databaseOwner}{objectQualifier}DNNQA_GroupQuestions WHERE GroupID = @GroupId)
	ORDER BY CreatedOnDate DESC
GO


/****** Object:  StoredProcedure {databaseOwner}{objectQualifier}[DNNQA_Question_KeywordSearchGroup]    Script Date: 6/23/2013 4:47:53 PM ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}[DNNQA_Question_KeywordSearchGroup]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}{objectQualifier}[DNNQA_Question_KeywordSearchGroup]
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}[DNNQA_Question_KeywordSearchGroup] 
	-- Add the parameters for the stored procedure here
	@ModuleId INT ,
	@Keyword NVARCHAR(150),
	@GroupId INT
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	SELECT  PostId, (SELECT Title FROM {databaseOwner}{objectQualifier}DNNQA_Post WHERE PostId = vp.PostId) AS Title,
			Body, Bounty, ParentId, PortalId, ViewCount, Score, Approved, ApprovedDate, Deleted, AnswerId, AnswerDate, Closed,
			ClosedDate, Protected, ProtectedDate, CreatedUserId, CreatedDate, LastModifiedUserId, LastModifiedDate, ContentItemId,
			Content, ContentTypeId, TabId, ModuleId, ContentKey, Indexed, CreatedByUserId, CreatedOnDate, LastModifiedByUserId,
			LastModifiedOnDate,
			(SELECT TOP (1) CreatedUserID FROM {databaseOwner}{objectQualifier}vw_DNNQA_Posts 
			 WHERE (PostID = vp.PostID OR ParentID = vp.PostID) AND Deleted = 0 AND Approved = 1 ORDER BY  CreatedDate DESC) AS LastApprovedUserID ,
			(SELECT TOP (1) CreatedDate FROM {databaseOwner}{objectQualifier}vw_DNNQA_Posts
			  WHERE (PostID = vp.PostID OR ParentID = vp.PostID) AND Deleted = 0 AND Approved = 1 ORDER BY  CreatedDate DESC) AS LastApprovedDate ,
			(SELECT COUNT(PostId) FROM {databaseOwner}{objectQualifier}DNNQA_Post WHERE (ParentId = vp.PostId) AND (ParentId <> 0) AND (Approved = 1) AND (Deleted = 0)) AS TotalAnswers ,
			(SELECT COUNT(PostId) FROM {databaseOwner}{objectQualifier}DNNQA_Vote WHERE PostID = vp.PostID AND VoteTypeID = 1) AS UpVotes ,
			(SELECT COUNT(PostId) FROM {databaseOwner}{objectQualifier}DNNQA_Vote WHERE PostID = vp.PostID AND VoteTypeID = -1) AS DownVotes ,
			(SELECT COUNT(PostID) FROM {databaseOwner}{objectQualifier}vw_DNNQA_Posts WHERE ModuleId = @ModuleId AND ParentId = 0 AND Deleted = 0 AND Approved = 1 AND 
			 (@Keyword IS NULL OR (Title LIKE '%' + @Keyword + '%' OR Body LIKE '%' + @Keyword + '%'))) AS TotalRecords
	FROM    {databaseOwner}{objectQualifier}vw_DNNQA_Posts vp
	WHERE   ModuleId = @ModuleId AND ParentId = 0 AND Deleted = 0 AND Approved = 1 AND 
			(@Keyword IS NULL OR (Title LIKE '%' + @Keyword + '%' OR Body LIKE '%' + @Keyword + '%'))
			AND vp.PostID IN (SELECT QuestionID FROM DNNQA_GroupQuestions WHERE GroupID = @GroupId)
	ORDER BY LastApprovedDate DESC
END
GO


/****** Object:  StoredProcedure {databaseOwner}{objectQualifier}[DNNQA_Post_Add]    Script Date: 6/25/2013 12:08:07 AM ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}[DNNQA_Post_Add]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}DNNQA_Post_Add
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DNNQA_Post_Add
	@Title NVARCHAR(150),  
	@Body NVARCHAR(MAX),  
	@Bounty INT,  
	@ParentID INT,  
	@PortalID INT,  
	@ContentItemID INT,  
	@Approved BIT,  
	@ApprovedDate DATETIME,  
	@CreatedUserID INT,  
	@CreatedDate DATETIME, 
	@GroupID INT
AS 
BEGIN
	IF ( @ParentID > 0
		 AND @Approved = 1
	   ) 
		BEGIN			
			UPDATE  {databaseOwner}{objectQualifier}ContentItems SET LastModifiedByUserID = @CreatedUserID, LastModifiedOnDate = @CreatedDate WHERE ContentItemID = @ContentItemID
		END
	DECLARE @SId Int
	INSERT  {databaseOwner}{objectQualifier}DNNQA_Post
			(Title, Body, Bounty, ParentID, PortalID, ContentItemID, ViewCount, Score, Approved, ApprovedDate, Deleted, Closed,
				Protected, CreatedUserID, CreatedDate, LastModifiedDate, LastModifiedUserID)
	VALUES  (@Title, @Body, @Bounty, @ParentID, @PortalID, @ContentItemID, 0, 0, @Approved, @ApprovedDate, 0, 0, 0, 
				@CreatedUserID, @CreatedDate, @CreatedDate, @CreatedUserID)
	Set @SId =  SCOPE_IDENTITY()
	
	IF ( @GroupID > 0 AND @ParentID = 0) 
		BEGIN			
			INSERT INTO {databaseOwner}{objectQualifier}DNNQA_GroupQuestions (GroupID,  QuestionID,  IsDefault) VALUES (@GroupID,  @SId,  1)
		END
		   
	Select @SId 
END
GO


/****** Object:  StoredProcedure {databaseOwner}{objectQualifier}[DNNQA_Term_GetByContentType]    Script Date: 6/25/2013 12:14:27 AM ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}[DNNQA_Term_GetByContentType]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}[DNNQA_Term_GetByContentType]
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}[DNNQA_Term_GetByContentType]
	@PortalId INT ,
	@ContentTypeId INT ,
	@ModuleId INT ,
	@VocabularyId INT,
	@GroupId INT
AS
BEGIN 
If (@GroupId > 0)
	BEGIN
		SELECT TOP 1000 TermID, Name, ParentTermID, [Description], [Weight],
				(SELECT CreatedOnDate FROM {databaseOwner}{objectQualifier}Taxonomy_Terms T WHERE VRT.TermID = T.TermID) AS CreatedOnDate,
				(SELECT CreatedByUserId FROM {databaseOwner}{objectQualifier}Taxonomy_Terms T WHERE VRT.TermID = T.TermID) AS CreatedByUserId,
				(SELECT LastModifiedOnDate FROM {databaseOwner}{objectQualifier}Taxonomy_Terms T WHERE VRT.TermID = T.TermID) AS LastModifiedOnDate,
				(SELECT LastModifiedByUserId FROM {databaseOwner}{objectQualifier}Taxonomy_Terms T WHERE VRT.TermID = T.TermID) AS LastModifiedByUserId,
				VocabularyID, TermLeft, TermRight,
				(SELECT COUNT(TermID) FROM {databaseOwner}{objectQualifier}vw_DNNQA_Terms T INNER JOIN {databaseOwner}{objectQualifier}DNNQA_Post P ON T.ContentItemID = P.ContentItemId WHERE TermID = VRT.TermID
				 AND ContentTypeID = @ContentTypeID AND T.PortalID = @PortalID AND ModuleID = @ModuleID AND P.ParentId = 0
				  AND p.PostId IN (SELECT QuestionID FROM DNNQA_GroupQuestions WHERE GroupID = @GroupId)) AS TotalTermUsage,
				(SELECT COUNT(TermID) FROM {databaseOwner}{objectQualifier}vw_DNNQA_Terms T INNER JOIN {databaseOwner}{objectQualifier}DNNQA_Post P ON T.ContentItemID = P.ContentItemId WHERE TermID = VRT.TermID
				 AND ContentTypeID = @ContentTypeID AND T.PortalID = @PortalID AND ModuleID = @ModuleID AND CreatedOnDate > DATEADD(day, -30, GETDATE()) 
				 AND P.ParentId = 0 AND p.PostId IN (SELECT QuestionID FROM DNNQA_GroupQuestions WHERE GroupID = @GroupId)) AS MonthTermUsage,
				(SELECT COUNT(TermID) FROM {databaseOwner}{objectQualifier}vw_DNNQA_Terms T INNER JOIN {databaseOwner}{objectQualifier}DNNQA_Post P ON T.ContentItemID = P.ContentItemId WHERE TermID = VRT.TermID AND 
				 ContentTypeID = @ContentTypeID AND T.PortalID = @PortalID AND ModuleID = @ModuleID AND CreatedOnDate > DATEADD(day, -7, GETDATE()) 
				 AND P.ParentId = 0 AND p.PostId IN (SELECT QuestionID FROM DNNQA_GroupQuestions WHERE GroupID = @GroupId)) AS WeekTermUsage,
				(SELECT COUNT(TermID) FROM {databaseOwner}{objectQualifier}vw_DNNQA_Terms T INNER JOIN {databaseOwner}{objectQualifier}DNNQA_Post P ON T.ContentItemID = P.ContentItemId WHERE TermID = VRT.TermID 
				 AND ContentTypeID = @ContentTypeID AND T.PortalID = @PortalID AND ModuleID = @ModuleID AND CreatedOnDate > DATEADD(day, -1, GETDATE()) 
				 AND P.ParentId = 0 AND p.PostId IN (SELECT QuestionID FROM DNNQA_GroupQuestions WHERE GroupID = @GroupId)) AS DayTermUsage
		FROM    {databaseOwner}{objectQualifier}vw_DNNQA_Terms AS VRT
		WHERE   VRT.PortalID = @PortalID AND VocabularyID = @VocabularyId AND ContentTypeID = @ContentTypeID AND ModuleID = @ModuleID AND 
			VRT.ContentItemID IN (SELECT ContentItemId FROM {databaseOwner}{objectQualifier}DNNQA_Post WHERE PostId IN ( SELECT QuestionID FROM DNNQA_GroupQuestions WHERE GroupID = @GroupId) 
			AND ContentItemId IS NOT NULL AND ContentItemId  > 0)
		GROUP BY TermID, Name, ParentTermID, [Description], [Weight], VocabularyID, TermLeft, TermRight
	END
ELSE
	BEGIN
		SELECT TOP 1000 TermID, Name, ParentTermID, [Description], [Weight],
				(SELECT CreatedOnDate FROM {databaseOwner}{objectQualifier}Taxonomy_Terms T WHERE VRT.TermID = T.TermID) AS CreatedOnDate,
				(SELECT CreatedByUserId FROM {databaseOwner}{objectQualifier}Taxonomy_Terms T WHERE VRT.TermID = T.TermID) AS CreatedByUserId,
				(SELECT LastModifiedOnDate FROM {databaseOwner}{objectQualifier}Taxonomy_Terms T WHERE VRT.TermID = T.TermID) AS LastModifiedOnDate,
				(SELECT LastModifiedByUserId FROM {databaseOwner}{objectQualifier}Taxonomy_Terms T WHERE VRT.TermID = T.TermID) AS LastModifiedByUserId,
				VocabularyID, TermLeft, TermRight,
				(SELECT COUNT(TermID) FROM {databaseOwner}{objectQualifier}vw_DNNQA_Terms T INNER JOIN {databaseOwner}{objectQualifier}DNNQA_Post P ON T.ContentItemID = P.ContentItemId WHERE TermID = VRT.TermID
				 AND ContentTypeID = @ContentTypeID AND T.PortalID = @PortalID AND ModuleID = @ModuleID AND P.ParentId = 0) AS TotalTermUsage,
				(SELECT COUNT(TermID) FROM {databaseOwner}{objectQualifier}vw_DNNQA_Terms T INNER JOIN {databaseOwner}{objectQualifier}DNNQA_Post P ON T.ContentItemID = P.ContentItemId WHERE TermID = VRT.TermID
				 AND ContentTypeID = @ContentTypeID AND T.PortalID = @PortalID AND ModuleID = @ModuleID AND CreatedOnDate > DATEADD(day, -30, GETDATE()) AND P.ParentId = 0) AS MonthTermUsage,
				(SELECT COUNT(TermID) FROM {databaseOwner}{objectQualifier}vw_DNNQA_Terms T INNER JOIN {databaseOwner}{objectQualifier}DNNQA_Post P ON T.ContentItemID = P.ContentItemId WHERE TermID = VRT.TermID AND 
				 ContentTypeID = @ContentTypeID AND T.PortalID = @PortalID AND ModuleID = @ModuleID AND CreatedOnDate > DATEADD(day, -7, GETDATE()) AND P.ParentId = 0) AS WeekTermUsage,
				(SELECT COUNT(TermID) FROM {databaseOwner}{objectQualifier}vw_DNNQA_Terms T INNER JOIN {databaseOwner}{objectQualifier}DNNQA_Post P ON T.ContentItemID = P.ContentItemId WHERE TermID = VRT.TermID 
				 AND ContentTypeID = @ContentTypeID AND T.PortalID = @PortalID AND ModuleID = @ModuleID AND CreatedOnDate > DATEADD(day, -1, GETDATE()) AND P.ParentId = 0) AS DayTermUsage
		FROM    {databaseOwner}{objectQualifier}vw_DNNQA_Terms AS VRT
		WHERE   VRT.PortalID = @PortalID AND VocabularyID = @VocabularyId AND ContentTypeID = @ContentTypeID AND ModuleID = @ModuleID
		GROUP BY TermID, Name, ParentTermID, [Description], [Weight], VocabularyID, TermLeft, TermRight
	END 
END
GO


/****** Object:  StoredProcedure {databaseOwner}{objectQualifier}[DNNQA_Question_TermSearch]    Script Date: 6/25/2013 12:24:04 AM ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}[DNNQA_Question_TermSearch]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}[DNNQA_Question_TermSearch]
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}[DNNQA_Question_TermSearch]
	@ModuleId INT, 
	@PageSize INT, 
	@Term NVARCHAR(250),
	@GroupId INT
AS
BEGIN 
	IF (@GroupId > 0)
		BEGIN
			SELECT  PostId, Title, Body, Bounty, ParentId, PortalId, ViewCount, Score, Approved, ApprovedDate, Deleted, AnswerId, AnswerDate, Closed, 
				ClosedDate, Protected, ProtectedDate, CreatedUserId, CreatedDate, LastModifiedUserId, LastModifiedDate, vp.ContentItemId, Content, 
				ContentTypeId, TabID, ModuleID, ContentKey, Indexed, vp.CreatedByUserId, vp.CreatedOnDate, vp.LastModifiedByUserId, vp.LastModifiedOnDate, 
				(SELECT TOP (1) CreatedUserID FROM {databaseOwner}{objectQualifier}vw_DNNQA_Posts WHERE (PostID = vp.PostID OR ParentID = vp.PostID) AND Deleted = 0 AND Approved = 1
					ORDER BY  CreatedDate DESC) AS LastApprovedUserID, 
				(SELECT TOP (1) CreatedDate FROM {databaseOwner}{objectQualifier}vw_DNNQA_Posts WHERE (PostID = vp.PostID OR ParentID = vp.PostID) AND Deleted = 0 AND Approved = 1
					ORDER BY  CreatedDate DESC) AS LastApprovedDate, 
				(SELECT COUNT(PostId) FROM {databaseOwner}{objectQualifier}DNNQA_Post WHERE (ParentId = vp.PostId) AND (ParentId <> 0) AND (Approved = 1) AND (Deleted = 0)) AS TotalAnswers, 
				(SELECT COUNT(PostId) FROM {databaseOwner}{objectQualifier}DNNQA_Vote WHERE PostID = vp.PostID AND VoteTypeID = 1) AS UpVotes, 
				(SELECT COUNT(PostId) FROM {databaseOwner}{objectQualifier}DNNQA_Vote WHERE PostID = vp.PostID AND VoteTypeID = -1) AS DownVotes, 
				(SELECT COUNT(PostId) FROM {databaseOwner}{objectQualifier}vw_DNNQA_Posts INNER JOIN {databaseOwner}{objectQualifier}ContentItems_Tags CIT ON vp.ContentItemId = CIT.ContentItemId 
					INNER JOIN {databaseOwner}{objectQualifier}Taxonomy_Terms TT ON CIT.TermId = TT.TermId
					WHERE ModuleId = @ModuleId AND ParentId = 0 AND Name = @Term AND Deleted = 0) AS TotalRecords
			FROM    {databaseOwner}{objectQualifier}vw_DNNQA_Posts vp INNER JOIN {databaseOwner}{objectQualifier}ContentItems_Tags CIT ON vp.ContentItemId = CIT.ContentItemId
					INNER JOIN {databaseOwner}{objectQualifier}Taxonomy_Terms TT ON CIT.TermId = TT.TermId
			WHERE   ModuleId = @ModuleID AND ParentId = 0 AND Name = @Term AND Deleted = 0
			AND vp.PostID IN (SELECT QuestionID FROM {databaseOwner}{objectQualifier}DNNQA_GroupQuestions WHERE GroupID = @GroupId)
			ORDER BY LastApprovedDate DESC
		END
	ELSE
		BEGIN
			SELECT  PostId, Title, Body, Bounty, ParentId, PortalId, ViewCount, Score, Approved, ApprovedDate, Deleted, AnswerId, AnswerDate, Closed, 
				ClosedDate, Protected, ProtectedDate, CreatedUserId, CreatedDate, LastModifiedUserId, LastModifiedDate, vp.ContentItemId, Content, 
				ContentTypeId, TabID, ModuleID, ContentKey, Indexed, vp.CreatedByUserId, vp.CreatedOnDate, vp.LastModifiedByUserId, vp.LastModifiedOnDate, 
				(SELECT TOP (1) CreatedUserID FROM {databaseOwner}{objectQualifier}vw_DNNQA_Posts WHERE (PostID = vp.PostID OR ParentID = vp.PostID) AND Deleted = 0 AND Approved = 1
					ORDER BY  CreatedDate DESC) AS LastApprovedUserID, 
				(SELECT TOP (1) CreatedDate FROM {databaseOwner}{objectQualifier}vw_DNNQA_Posts WHERE (PostID = vp.PostID OR ParentID = vp.PostID) AND Deleted = 0 AND Approved = 1
					ORDER BY  CreatedDate DESC) AS LastApprovedDate, 
				(SELECT COUNT(PostId) FROM {databaseOwner}{objectQualifier}DNNQA_Post WHERE (ParentId = vp.PostId) AND (ParentId <> 0) AND (Approved = 1) AND (Deleted = 0)) AS TotalAnswers, 
				(SELECT COUNT(PostId) FROM {databaseOwner}{objectQualifier}DNNQA_Vote WHERE PostID = vp.PostID AND VoteTypeID = 1) AS UpVotes, 
				(SELECT COUNT(PostId) FROM {databaseOwner}{objectQualifier}DNNQA_Vote WHERE PostID = vp.PostID AND VoteTypeID = -1) AS DownVotes, 
				(SELECT COUNT(PostId) FROM {databaseOwner}{objectQualifier}vw_DNNQA_Posts INNER JOIN {databaseOwner}{objectQualifier}ContentItems_Tags CIT ON vp.ContentItemId = CIT.ContentItemId 
					INNER JOIN {databaseOwner}{objectQualifier}Taxonomy_Terms TT ON CIT.TermId = TT.TermId
					WHERE ModuleId = @ModuleId AND ParentId = 0 AND Name = @Term AND Deleted = 0) AS TotalRecords
			FROM    {databaseOwner}{objectQualifier}vw_DNNQA_Posts vp INNER JOIN {databaseOwner}{objectQualifier}ContentItems_Tags CIT ON vp.ContentItemId = CIT.ContentItemId
					INNER JOIN {databaseOwner}{objectQualifier}Taxonomy_Terms TT ON CIT.TermId = TT.TermId
			WHERE   ModuleId = @ModuleID AND ParentId = 0 AND Name = @Term AND Deleted = 0
			ORDER BY LastApprovedDate DESC
		END
END
GO